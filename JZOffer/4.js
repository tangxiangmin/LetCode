
// 在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。


// 思路1： 二维数组遍历，时间O(r*c)，空间O(1)

// 思路2：由于该二维数组排列比较特殊，每次选择二维数组的**右上角**与目标元素进行比较，然后移除掉行或者列，缩小查找范围
// 以下面的例子来研究， 如果目标元素为7
// 第一次右上角元素 9 > 7 ，且9是所在列最小的元素，则可以直接移除掉该列
// 第二次右上角元素 8 > 7, 同理移除该列
// 第三次右上角元素 2 > 7，有2是所在行最大的元素，则可以直接移除掉该行
// 第四次右上角元素 4 > 7 ，同理移除该行
// 第五次 右上角元素 7 == 7 ，找到目标元素，返回true

function solution(matrix, n){
    var row = matrix.length
    if(!row) return false
    var col = matrix[0].length

    var r = 0
    var l = col-1

    while(r < row && l >= 0){
        var rt = matrix[r][l]
        if(rt === n){
            return true
        }else if(rt > n){
            l--
        }else{
            r++
        }
    }
    return false
}

// 思路3： 同理，我们每次选择左下角的元素lb进行比较也是可以的，
// 当lb < n时，lb是所在列最大元素，则直接移除该列
// 当lb > n时，lb是所在行最小元素，可以直接移除该行

// 收获：当我们需要解决一个复杂问题的时候，可以从一个具体的问题入手，通过简单分析具体的例子，尝试寻找普遍的规律

var matrix = [
    [1,2,8,9],
    [2,4,9,12],
    [4,7,10,13],
    [6,8,11,15]
]
var n = 7 // true
// n = 5
var res = solution(matrix, n)
console.log(res)
