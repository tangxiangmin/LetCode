/**
 * @param {number} K
 * @param {number} N
 * @return {number}
 */
// 思路：鸡蛋没有摔碎的话是可以继续使用的，
// 如果是求最少使用鸡蛋的次数，从最底层开始依次向上每层楼丢鸡蛋即可，
// 题目要求最少的移动次数
// 已知K=1,N=2的的结果是2
// 比如K = 2, N = 6，首先二分，从3楼开始，如果碎了，则问题变成K=1,N=2，答案为1 + 2 = 3；如果没碎，F取值范围为[4,5,6]，问题可以简化为K=2，N=2(4,5,6与0,1,2的问题一样)，答案同样为1 + 2 = 3
// 比如K = 3, N = 14，首先二分，从7楼开始，如果碎了，问题变成K=2,N=6，同上答案为 1 + 3 = 4；如果没碎，则F取值范围为[8,9,10,11,12,13,14],问题简化为K=3,N=6,答案同上

// dp[k][n] 表示最少移动的次数
// 以上作废

// 1、无论你在哪层楼扔鸡蛋，鸡蛋只可能摔碎或者没摔碎，碎了的话就测楼下，没碎的话就测楼上。
// 2、无论你上楼还是下楼，总的楼层数 = 楼上的楼层数 + 楼下的楼层数 + 1（当前这层楼）。
// 根据这个特点，可以写出下面的状态转移方程：
// dp[k][m]表示使用k个鸡蛋移动m次可以测出的楼层数
// dp[k][m] = dp[k][m - 1] + dp[k - 1][m - 1] + 1
// dp[k][m - 1] 就是楼上的楼层数，因为鸡蛋个数 k 不变，也就是鸡蛋没碎，扔鸡蛋次数 m 减一；
// dp[k - 1][m - 1] 就是楼下的楼层数，因为鸡蛋个数 k 减一，也就是鸡蛋碎了，同时扔鸡蛋次数 m 减一。
// 上述递推公式可以这样理解，一次扔鸡蛋至少能推测1层楼，剩余m-1次扔鸡蛋则分别可以推测dp[k-1][m-1]和dp[k][m-1]层楼
// dp[k-1][m-1]表示如果这次扔鸡蛋破了，那么只剩下k-1个鸡蛋和m-1次扔鸡蛋的机会可以探测到的最高楼层数
// dp[k][m-1]表示这次扔鸡蛋没有破，还剩下k个鸡蛋和m-1次扔鸡蛋机会可以探测到的最高楼层数
// 同时还有本身扔鸡蛋的这一层楼
// 一共能够推测的楼层就是上述三者之和
var superEggDrop = function (K, N) {
    var dp = []
    for(var i = 0; i <= K; ++i){
        dp.push(new Array(N+1).fill(0))
    }
    var m = 0
    while(dp[K][m] < N){
        m++;
        for (var k = 1; k <= K; k++)
            dp[k][m] = 1 + dp[k-1][m-1] + dp[k][m-1];
    }
    return m
};

var K = 2, N = 6 // 3
var res = superEggDrop(K, N)
console.log(res)

// dp(K, N)  dp(K -1, N/2)

