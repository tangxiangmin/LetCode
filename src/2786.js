/**
 * @param {number[]} nums
 * @param {number} x
 * @return {number}
 */
// 01背包
// 但是有的测试用例会超时
var maxScore = function (nums, x) {

    const n = nums.length

    const cache = new Map()
    return dfs(0, 0)

    function dfs(i, prev) {
        const key = `${i},${prev}`
        if (i === n) return 0
        if (cache.has(key)) return cache.get(key)
        const a = nums[i] + dfs(i + 1, i) - (nums[prev] % 2 !== nums[i] % 2 ? x : 0)
        const b = dfs(i + 1, prev)

        const ans = Math.max(a, b)
        cache.set(key, ans)
        return ans
    }
};

// 实际上不需要传入上一次选择的索引值，只需要传入是奇数还是偶数即可，这样可以让缓存的命中率增加
var maxScore = function (nums, x) {

    const n = nums.length

    const cache = new Map()
    return dfs(0, nums[0] % 2)

    function dfs(i, prev) {
        const key = `${i},${prev}`
        if (i === n) return 0
        if (cache.has(key)) return cache.get(key)
        const cur = nums[i] % 2
        const a = nums[i] + dfs(i + 1, cur) - (prev !== cur ? x : 0)
        const b = dfs(i + 1, prev)

        const ans = Math.max(a, b)
        cache.set(key, ans)
        return ans
    }
}

var nums = [2, 3, 6, 1, 9, 2], x = 5
nums = [2, 4, 6, 8], x = 3
nums =
    [495, 141, 546, 902, 569, 656, 882, 597, 159, 512, 645, 413, 461, 58, 971, 176, 294, 171, 415, 489, 133, 951, 125, 949, 922, 911, 103, 49, 580, 922, 643, 989, 55, 298, 605, 674, 430, 824, 997, 604, 690, 649, 437, 380, 361, 122, 332, 552, 695, 22, 11, 472, 518, 989, 589, 348, 110, 554, 660, 304, 716, 689, 297, 699, 158, 914, 860, 882, 692, 65, 61, 205, 865, 651, 977, 397, 418, 915, 256, 30, 608, 186, 310, 132, 18, 494, 269, 755, 179, 306, 457, 182, 24, 723, 936, 422, 741, 902, 872, 633, 457, 744, 198, 91, 278, 871, 884, 276, 117, 640, 440, 249, 120, 100, 446, 921, 663, 874, 890, 936, 715, 516, 83, 666, 994, 570, 989, 980, 797, 288, 795, 29, 963, 704, 824, 558, 285, 14, 75, 614, 966, 132, 219, 804, 394, 715, 154, 616, 168, 79, 666, 451, 449, 112, 784, 614, 577, 771, 950, 116, 458, 436, 645, 194, 202, 27, 26, 889, 634, 673, 338, 299, 361, 871, 387, 711, 72, 763, 532, 304, 203, 736, 581, 858, 164, 343, 811, 563, 502, 738, 262, 902, 609, 382, 203, 789, 467, 340, 803, 395, 71, 791, 7, 936, 152, 853, 56, 771, 876, 560, 658, 808, 812, 484, 348, 515, 618, 8, 714, 591, 990, 209, 226, 381, 661, 89, 709, 285, 569, 838, 777, 159, 659, 509, 825, 160, 676, 262, 591, 23, 571, 811, 683, 749, 692, 482, 544, 866, 713, 280, 181, 714, 752, 415, 645, 937, 318, 647, 515, 505, 946, 75, 260, 387, 793, 204, 301, 776, 228, 894, 503, 325, 65, 603, 531, 339, 342, 109, 877, 816, 352, 795, 714, 567, 678, 855, 322, 795, 786, 165, 809, 761, 13, 881, 36, 495, 139, 735, 21, 607, 89, 179, 647, 169, 509, 718, 198, 937, 221, 435, 251, 145, 110, 84, 877, 326, 688, 439, 174, 429, 257, 381, 987, 723, 872, 68, 677, 613, 700, 886, 89, 434, 357, 18, 32, 376, 909, 768, 357, 441, 227, 433, 352, 228, 549, 666, 64, 631, 445, 709, 164, 761, 718, 111, 489, 526, 48, 816, 570, 431, 376, 589, 162, 62, 554, 649, 10, 51, 649, 799, 415, 580, 243, 847, 704, 479, 59, 3, 319, 879, 785, 808, 436, 420, 468, 106, 989, 673, 360, 928, 499, 245, 571, 637, 422, 387, 942, 964, 865, 720, 702, 790, 729, 924, 400, 650, 225, 202, 558, 516, 128, 232, 381, 287, 385, 622, 543, 771, 310, 439, 689, 815, 460, 220, 635, 592, 150, 613, 729, 229, 216, 786, 602, 580, 64, 305, 484, 520, 615, 386, 846, 632, 288, 927, 53, 267, 881, 505, 721, 726, 856, 863, 746, 346, 432, 920, 926, 33, 212, 415, 452, 908, 1000, 826, 650, 854, 62, 826, 521, 440, 938, 917, 735, 623, 909, 824, 761, 272, 598, 929, 388, 914, 618, 861, 310, 139, 225, 547, 369, 606, 649, 840, 716, 299, 94, 144, 906, 956, 344, 488, 833, 422, 716, 179, 331, 689, 730, 139, 3, 54, 117, 705, 378, 104, 207, 505, 557, 100, 286, 724, 284, 814, 592, 578, 64, 373, 943, 207, 830, 445, 666, 366, 860, 336, 633, 1000, 30, 724, 790, 710, 311, 176, 230, 15, 126, 197, 97, 584, 824, 891, 396, 536, 325, 492, 805, 788, 686, 311, 324, 934, 826, 934, 40, 245, 959, 546, 127, 26, 385, 943, 783, 7, 812, 474, 914, 71, 649, 189, 993, 34, 162, 800, 283, 773, 627, 884, 546, 811, 918, 839, 125, 103, 934, 395, 195, 831, 777, 630, 211, 820, 119, 547, 521, 812, 284, 59, 590, 46, 8, 284, 903, 777, 743, 502, 43, 749, 554, 571, 365, 28, 507, 338, 737, 87, 324, 658, 444, 451, 899, 213, 454, 37, 462, 501, 17, 325, 807, 818, 448, 604, 29, 13, 945, 899, 781, 472, 55, 937, 175, 847, 25, 788, 446, 510, 290, 777, 664, 31, 289, 381, 243, 344, 842, 62, 729, 162, 71, 199, 783, 186, 155, 840, 626, 153, 59, 860, 518, 229, 681, 122, 940, 677, 760, 367, 626, 886, 680, 161, 888], x = 143
var ans = maxScore(nums, x)
console.log(ans)